// <auto-generated />
using System;
using MedicalStoreManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedicalStoreManagement.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalStoreDbContext))]
    partial class MedicalStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .HasColumnName("Category_Name");

                    b.Property<int>("Category_Quantity")
                        .HasColumnName("Category_Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Recepts")
                        .IsRequired()
                        .HasColumnName("Recepts");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.CustomerPivot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("ProductStatus")
                        .HasColumnName("ProductStatus");

                    b.Property<string>("Research")
                        .IsRequired()
                        .HasColumnName("Research");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerPivots");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Furnitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Furnitor_Address")
                        .IsRequired()
                        .HasColumnName("Furnitor_Address");

                    b.Property<string>("Furnitor_Email")
                        .IsRequired()
                        .HasColumnName("Furnitor_Email");

                    b.Property<string>("Furnitor_FirstName")
                        .IsRequired()
                        .HasColumnName("Furnitor_FirstName");

                    b.Property<string>("Furnitor_LastName")
                        .IsRequired()
                        .HasColumnName("Furnitor_LastName");

                    b.Property<int>("Furnitor_NrPhone")
                        .HasColumnName("Furnitor_NrPhone")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Furnitors");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnName("ImageName");

                    b.Property<string>("Inventory_Name")
                        .IsRequired()
                        .HasColumnName("Inventory_Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("CompanyName");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FurnitorID")
                        .HasColumnName("FurnitorID")
                        .HasColumnType("int");

                    b.Property<string>("PricePerUnit")
                        .IsRequired()
                        .HasColumnName("PricePerUnit");

                    b.Property<string>("Product_Description")
                        .IsRequired()
                        .HasColumnName("Product_Description");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnName("Product_Name");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnName("Unit");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("FurnitorID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FurnitorID")
                        .HasColumnName("FurnitorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price");

                    b.Property<int>("ProductID")
                        .HasColumnName("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FurnitorID");

                    b.HasIndex("ProductID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "23BC3895-B661-6987-87A7-85A732C7E7B5", ConcurrencyStamp = "7497f932-e2ec-4714-b23a-341607364927", Name = "SuperAdmin", NormalizedName = "SuperAdmin" },
                        new { Id = "5FFB5456-CA2C-6161-AB2F-4AE3BE6E57D6", ConcurrencyStamp = "7fb9ae81-e8e6-4395-b724-a7863c951258", Name = "Employee", NormalizedName = "Employee" }
                    );
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CustomerID")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price");

                    b.Property<int>("ProductID")
                        .HasColumnName("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.SalePivot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CustomerPivotId");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPivotId");

                    b.HasIndex("ProductID");

                    b.ToTable("SalePivots");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7", AccessFailedCount = 0, ConcurrencyStamp = "ca76505a-d3fc-49bd-8701-ff1618b4b295", Email = "muhamedbrajshori123@gmail.com", EmailConfirmed = true, FirstName = "Muhamed", LastName = "Brajshori", LockoutEnabled = false, NormalizedEmail = "muhamedbrajshori123@gmail.com", NormalizedUserName = "muhamedbrajshori123@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEIoPjE40AeuHcbqK9fErBP71l2hRgF5npgYy5XxcrWm4HXgxfLNSTyCsnq41cXpJWQ==", PhoneNumber = "+38344225107", PhoneNumberConfirmed = true, SecurityStamp = "6ee56ba0-abc7-4a16-898a-9a8a464a2bc3", TwoFactorEnabled = false, UserName = "muhamedbrajshori123@gmail.com" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new { Id = 1, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", ClaimValue = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7", UserId = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7" },
                        new { Id = 2, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress", ClaimValue = "muhamedbrajshori123@gmail.com", UserId = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7" },
                        new { Id = 3, ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role", ClaimValue = "Super Admin", UserId = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7" },
                        new { Id = 4, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone", ClaimValue = "+38344225107", UserId = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7" },
                        new { Id = 5, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname", ClaimValue = "Muhamed", UserId = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7" },
                        new { Id = 6, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname", ClaimValue = "Brajshori", UserId = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "8A7EA655-6149-6CD5-BD56-DA253DD53FF7", RoleId = "23BC3895-B661-6987-87A7-85A732C7E7B5" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.Product", "Product")
                        .WithMany("Customers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.CustomerPivot", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.Product", "Product")
                        .WithMany("CustomerPivots")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Product", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalStoreManagement.Domain.Entities.Furnitor", "Furnitor")
                        .WithMany("Products")
                        .HasForeignKey("FurnitorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.Furnitor", "Furnitor")
                        .WithMany("Purchases")
                        .HasForeignKey("FurnitorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalStoreManagement.Domain.Entities.Product", "Product")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.Sale", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalStoreManagement.Domain.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MedicalStoreManagement.Domain.Entities.SalePivot", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.CustomerPivot", "CustomerPivot")
                        .WithMany("SalePivots")
                        .HasForeignKey("CustomerPivotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalStoreManagement.Domain.Entities.Product", "Product")
                        .WithMany("SalePivots")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalStoreManagement.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalStoreManagement.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
